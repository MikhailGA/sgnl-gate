import { Injectable, OnApplicationBootstrap } from '@nestjs/common';
import { UserService } from './user.service';
import { FolderService } from './folder.service';
import { FolderSeedNode } from '../types/folder-seed.interface';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class DatabaseSeedService implements OnApplicationBootstrap {
  constructor(
    private userService: UserService,
    private folderService: FolderService,
  ) {}

  async onApplicationBootstrap() {
    console.log('üîÑ –û—á–∏—Å—Ç–∫–∞ –∏ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');

    try {
      await this.clearDatabase();
      await this.seedUsers();
      await this.seedFolders();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    }
  }

  private async clearDatabase(): Promise<void> {
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    try {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ –¥–µ—Ç–µ–π, –ø–æ—Ç–æ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π)
      await this.folderService.clear();

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.userService.clear();

      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  private async seedUsers(): Promise<void> {
    console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    const testUsers = [
      {
        name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
        email: 'ivan@example.com',
        age: 25,
      },
      {
        name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
        email: 'maria@example.com',
        age: 30,
      },
      {
        name: '–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤',
        email: 'alexey@example.com',
      },
    ];

    for (const userData of testUsers) {
      await this.userService.create(userData);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name}`);
    }

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
  }

  private async seedFolders(): Promise<void> {
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤...');

    try {
      // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ seeds –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
      const seedsPath = path.join(
        process.cwd(),
        'apps/server/src/seeds/folders',
      );
      const jsonFiles = fs
        .readdirSync(seedsPath)
        .filter((file) => file.endsWith('.json'));

      if (jsonFiles.length === 0) {
        console.log('‚ö†Ô∏è  –ù–µ—Ç JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –∫–∞–∂–¥–æ–≥–æ JSON —Ñ–∞–π–ª–∞
      for (const jsonFile of jsonFiles) {
        const filePath = path.join(seedsPath, jsonFile);

        console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${jsonFile}`);

        const jsonContent = fs.readFileSync(filePath, 'utf8');
        const rootNode: FolderSeedNode = JSON.parse(jsonContent);

        await this.createFolderFromSeedNode(rootNode);

        console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ ${jsonFile} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
      }

      console.log(`üéâ –°–æ–∑–¥–∞–Ω–æ ${jsonFiles.length} –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –ø–∞–ø–æ–∫!`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–æ–∫ –∏–∑ JSON:', error);
      throw error;
    }
  }

  private async createFolderFromSeedNode(
    node: FolderSeedNode,
    parentId?: number,
  ): Promise<void> {
    const folder = await this.folderService.create({
      name: node.name,
      permissions: node.permissions,
      parentId,
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${node.name}`);

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø–∞–ø–∫–∏
    for (const child of node.children) {
      await this.createFolderFromSeedNode(child, folder.id);
    }
  }
}
