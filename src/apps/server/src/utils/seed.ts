import { DataSource } from 'typeorm';
import { User } from '../entities/user.entity';
import { join } from 'path';

export async function seedDatabase() {
  const dataSource = new DataSource({
    type: 'sqlite',
    database: join(process.cwd(), '.runtime', 'database.sqlite'),
    entities: [User],
    synchronize: true,
  });

  try {
    await dataSource.initialize();
    console.log('üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    const userRepository = dataSource.getRepository(User);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    const existingUsersCount = await userRepository.count();
    if (existingUsersCount > 0) {
      console.log(`üìã –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å ${existingUsersCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUsers = [
      {
        name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
        email: 'ivan@example.com',
        age: 25,
      },
      {
        name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
        email: 'maria@example.com',
        age: 30,
      },
      {
        name: '–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤',
        email: 'alexey@example.com',
      },
    ];

    for (const userData of testUsers) {
      const user = userRepository.create(userData);
      await userRepository.save(user);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name}`);
    }

    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await dataSource.destroy();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–¥, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedDatabase();
}
